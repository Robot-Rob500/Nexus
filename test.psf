<File version="2">
  <FileID>c0417f99-cfbd-40b0-ba44-7970e22c96bd</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAACWpSURBVHhe7d1pkF1neeBxUiGZqkzVfJwPs2So
ysxU+JBUhWQmlRkgEEggyZAABRnMagO22YLZbOMVG4wxBgzYBm94lyzLkqx9V7d6U2vtbnVL3dpa
rd437bIZFhueed/bkpHkPkGyRSyd83uqftXdt+85595rivd/7tJ6lTHGGGOMMcYYY4wxxhhjjDHG
GGOMMcYYY4wxxhhjjDHGGGOMMcYYY4wxxhhjjDHGGGNe4WlM+n7nd36n78/+7E/7Lv3YpX2XXXZ5
clnfZZcCAOe1tGZ/4hOf6Pvbt7+t79WvfnXfb/3Wb/WldX1PbYX/l+a3f/u3R1/zmtfE+9///vje
XfdE65bu2D2wP3b1T8aufRMAwPmsf3/09I7E/MXL4vLLL4/Xvva18bu/+7txfJkvnlwKefFfvGJt
bN41Fg1b+2Jt+94pHQDAee34mr1x51hsaOuOK674XPzev/29544v88XzZ3/6p33f/u7dsWX3eNpB
bzQAABec+rY9tbV84bI18ddvecuvD4CPfezSvnWbu6Opsz8aU0kAABemurbe6B0+HDfeeNOvD4DL
L7u8b9/I4Wjs3BeNW/sAgAtUffveGNr//+KGG844AA7WngFoShsDwG9aczrp/M361z3eycd6JY53
Qn4vwMDEs3H99TeeaQAcipZtg9HS1Q8Av1HrtmUDv3G/Ot70vz/XXqnjnaxx674YnPxxCoAbzlEA
5APl35+R6W8UAOSFa23bnpi5oCV++NiKuOfxledW3mcye+mGaOroi9btg7GqtSceeqo+fvjob+Z4
981YFQvrO9L9m1qYF6/tiPtnrp66LdNt8zLk+/DQ7PpY0do9bQS8pABYt33ohao4XcvW3mhp3/Ur
6efmrrFk/IWvLdsm0sHTPjr70jaDL9oHAGzcMRKPzmuKOUtao7l9dzS37Y6mLedQ2l/e54ynG+PJ
pRtjQ89wbTFe3tiRjrdn+m1ehrzPhk074oF0jBWtO2L1xl3p+1XRsLHn1x8v3/eTnXzZie9P/prk
fa5s6kzRsToajwfOyY9vc2d/DO4/wwDIf0EoB8D67uHajk41FK1ph43NrdG0blM0tW6OpvVt0dhY
F61Lb4uWhddF84Lro+HpG6J+Xvq69N5o3twTrT0j0+wLgKrbvGs07n9idaxs2ZYWrP5z/vHztW29
sbFnMBau2lwLjQ07htNZ8/JY39UXDR17p71+czpz3rBjdFobd45Ga1of8zvs83VP3z5/9K5t50g8
8tTaWNK4LUVATzz0ZF26bLj2TMeJ69Xu5/Ht16XHYWPed5JPmBvb96bHZqh2rHzMfFltu3T9k7c7
sZ+N2/tr9ykHwPrutE6f9PjmZ+HzmwDPOAD6Rw//CwHQnxb+jbXfr+9JD8SO/dG0dkHsmfOHcWDD
JTG57sMx2vR/Y/fTfxIr739zqpO9qbhODoCh4w/iWO3O5fpb333yMQCoihwAD8yqi1Xrtteesq5P
i9u5VLelt7bGLFzTFo/Nb07rz3Dc+/jKFAD7au+QP/36DWkRnbO8NW765v1x/dd/EDfces8prvva
3XHXg/PSmf3OWJuue/r2dVv2xJYUAI/NbYilTVMB8HCKgS0pAOo274769PsTckDkYHhw9oq44es/
rO37gZlLY226zfc+tjj9fFfcmC5/ZM7q2vXy5Sdvf8LG7QNx74xVxQFw4IwD4LJaAOQSyU+VnCot
1jkA1m+ODbsnYkPv/uRINNTNi96lb4s41hBxYF7E/vvi8KYPxtN3vjXWpRtU+2tEx7ffuGtfrF6z
Jp588umYNWdezFq0Nta0D8Wm9B/lxccDoMza9ozHj2bXx+rW7trilV+zPpcaOvbFprQgL0oB8PiC
dbEpBUd+jT4vmo35792cdv1124biupu/H3PmLorGxtZoadn4gubm9bG2vjm+est349F5dekkeORF
2+eAaN8zFo/Pa4xlLd2xav3OtICvjbZdI8efAcjPOkzJT88vaeqMq669LRoa1kVTU2tc/5Vvx9U3
3Rk33nxHNKXjN6xtjiuv/UYsS4HUlPdf2zY/U5GfgZjaz6YUOPk+5f3lk+qTH9/W9JgOH/jJ2QXA
pnyGnnZ0qqkz9qam5miaPzfqZj8Raxcuibpls2Lb3NdHDNwev9h5RUT3e2N8+X+PGbf/VbSmG7xp
1/jx7cdi857eWDx3Tjy5uDXqN/dEw+ZdsW77SO14m/dMxpZs93gtCPLxNqfQ2JLkP0u8Oe0nm7rO
WG2b2vd70u/Tf+BTbysA57v23ol0BpxOBNOZ8oa0WDWnNeN0+c10eT3I/58/ndpT5+k6023blAIg
n5EvqWuPGQvXpTVlrLZYbkoB0NKZt+k/Reu24fjil2+LAwcORp4jR47GwfT9wYOH4mc/+1ntsnvv
eyydoS9J69TYi7bPx9t6PACWr+uJVRt2xaNzGqIjXdbQnj+bn0IhRULWnI5fv3lP7Ux/xsx08pxm
bGwivvb176fjH6r9/PAjs+OGW39Qe7ag9vH8tP8cAic+5teY79+Oodr7GvLjtOn4M+snrE8RcFYB
MDB2uLYIb047OlV6sPsORtNTM2PDX/yH2PKP/ysWv+41sfT+22PTk/8jYvd7I7r+d0Tnf4sDi/5N
PPj1v4oN6QbXFvDa9uPR1rs3ls5fFIta+mLr0LPRte9AtKVjte0ajMbWtljRsDHqtuxN/5H2pzvV
Hy2buqO+tTNV1Z5Yl23dGaubNkV9e3/6D9gbdc2bYlUqx9aesbSP028vAOezrXsn46Gn1kbd+p7Y
mM6o86J8snVdg9GQznQfm5fftb+o9tT4yfJlj86ti4YtvbXrnr5989aBtDaMxeK6jpi5qDWdnY/X
FsvNPYPp+kPpOnmbX1nfPRpXXnd7jI6lk80tW+OSy66Kr33r/vjCtbfHjTd9K37xi1/E3T94KB54
Ynm6/RMv2j4fr7N3vBYAK9ftiDUbd9cCYGu6LJ+h50U6v8egJX3fnL5v3T710sB1t9wdP7jn0Th0
6HA89/Of1wLk+3c/VHvZIT9zkF8+z9fP20/tY0r+Pr+/IN+n1m2DsSWfLJ/0+OYIGDl4VgFwJNr2
5jPvdIZ9ivSADByKNY8+GBvf/fr4yayZsej1/yOevuvWWPCdfx/tD/672HTPq5NXxYpbXhX33/QX
sSndoLbetJjXtp+Ijn37YvmC+TFz9tJYsKI+ljR0RGs6q29qXBlPzF4S89LvZs1ZEss3D8WmnvaY
/fDjMfPp+li9pT0WzJkTM+cuj/nz58XMOQtj7rLGWLhoUcyc8WTMWbsz2vZNppg4/TYDcL7q3Lc/
HkoLZN2GHWnBGqs9BX+yLXv2pzP2JXFLOivOZ94P/GjmKfJlt952V9zzyMLadU/fPn8arX3PRCyp
3xozF6+PjrS23f/EmnSCmd/nNvyi629IZ/U5AHb07Ijly1fHhz9+ddz10IK0EN8X//y5G+LHzx6L
79xxTzw4e1W6/ZMv2r4lRUhX32TMeLopVq7fmRb3PSlQGqMzHTcv1vkNffl1+fyMRf6a30+Xn9n+
/gNz44ov3BRdXdvj+ed+Fu3tW+OfP/+VuPuR+emEePz46/n5Hf5TTnzUPn/fvmukdp/W9wzVXlI5
+fHdlIJg9NBP47rrzjAABsePREff/tpTM6eajPbBw7FixmOx9PV/FMOXfCAefM1/igUP3hdL594S
T97/xXjivquSL8eMe66ORU9+JzZ07k77OnB8+/3ROTAQKxbOjyfmrowldS2xomV7KpSdMX/W07F0
y0hsH30mWtYuj7krN6Y71xVznlgQq7cdiu2DfWl/T8WcNTuia3gsVi2aHTMWbYmOoSPR2rwmZs1r
inV9h6LjRbcZgPPVtoGD8fCcxqgvCID2vQfj5tsfiMWLlkfEL+PnP//pKfJlq1bVx43pTDlf9/Tt
XwiAtR0xa8mGWnCcCID1KQBa03VOll+q/tK134wtm9ti586dMWPmnHjssVnxyKOzYvmKNekM/UB8
8/a74sEnV6YTzskXbZ+fhcgB8HgKgPwRwPzUfQ6AfFlerPOZfP6YfT5bz6/P55+/d//s+NLVX4vu
7p4YGhqMHz04I0ZHR6Krsyu+cOVX4+6H5kXr8dfza2/GP76P2n6S/Ox3vk/5fXYde9M6fdLjm18i
Hzv8s7MJgKOxdd+B2o5OkaKgc/BIrJ7zVNz92v8SP/zD/xpffc3vx7zHn4w7Gw/Fd1dNxrdWTMRt
CwaicdOu2NzVG+vbtqV9HTy+jwPRNTgQyxcsjiXr+tJC/uO0sB+Nrl1dMW/Wkli1bTS2j/0kNrbW
x4I1G6K5a1vMf2pFNOw8HF39e2Lx3EWxPEVC18h41K1YHgtWb4v2oUOxfmNTzJ3XEC29h6MzPcgv
ut0AnJe2Dx6KR9ICmZ8ByGerJxa2E9r7DsZt338s7r77/ti6tSPWt64/xdaOjrjvvofjljseql33
9O1b0qKcF8KlKQCeTAHQ1X8wHkiLZX7afH13/oTa1DMBJ2zaOVF7BmDRoqXRuXVrdG/fHtu3bat9
7ersjM7kKzd9Kx6ZUxdtvQdetH2Ojq4UGTPmN8WaTbtrb9J7dG5DbEuX5Y8P5kX6hPz+uDUbd8Zn
v/CVWLVydfR0b49bv3lXfOpzN8e3vv2D2NnTE8uWLk+/v7n2hr/8XriTt58yGu3HAyA/3b81rdMn
P75t6cT9zAPg0qkA6EwPUt7RKVIU5NdrmprWpQV4daxYsjR9XRFLVzfGTQtG456GiKueinj/t7pj
ZePGaO/eHevbt6d9HT6+j4OxbWggls2bHwsadkVHurwzxUHXwECsWvx0zFnRFk1bOmLxwhWxbGO6
szs7Yu7MJVGfAmD7wJ5Y9OTTsWTTcGwbSw/akkUxb0VndIwcidb1a2P2U2tjXd+R2gP/otsNwHmp
e+hwLQAa0tlyWzpbPX2By2/0Xli3Ja75yh3xuStviS9++dZT5Mu+fON34unVG2vXPX37vMh3puMs
W9tZ+0NA2wYO1QKgIy2aU592O/X6+en4h59amfb9jfjCVV+f5nhfi6/efm/U5ZPcXS++vfkp/e60
fs6c35yuk9/131d7P0D3wMGpj8DX3sw49TVvn6//vXtn1T4J8Pm072/e+WjtI4bf+O5Dtft21XXf
jDsfeCrtO18/v0F+LJnafmpf47X3HPwo3ae83868Tp/0+Lbv3R9jR35+5gEwNJHOytODlHd0ihwF
eydi3ca26Bn/aWzq7o3OPYOxomlLXHRbR1z8vbH4m+tH4s8vb4jl9Rtj6469sSEFQNfgkeP7OJQC
YCwFxIaobx+MzoF0Zp8u70pfO/fsimXLlsdT85bEkuaeaB88Flt3747VdZtjfTqz3z4wFGvXbojG
beOxbXgy1q3fFGs27I3O4SOxpbMrVjV0xeZ9R2Jb/2m3GYDzVk/6//D8B3oa0oLa0bs/LWr5Xf2n
2pQWyo1podvQk8+AXyz/rnadabbNv+9KJ5rLGzpj9rJNsX3wcPxoVl1aX/InCPIn1F68TV6Y89fT
j3NCPlbRtvn3PWn9fGJBS9Rv7q29a//xdP92DB6qbTP1abb8ybbj3++eSOEz+cI+8/f5fXNte/bX
niHIl+fva2+mr30ibjy2HN/uhK7eidp9ys8Q5Gc4Tn58t/YdiPFaAFx/pgFwLLYPpcU03YlTpAcu
L9hNLa2xvq0rmtetj9YNaSFe2xzfuH913HDn8rj+u0vj5ruWx+r6pljXuj42dvTE9uFjx/eRzvb7
D9V+ztW3Ld3QHBr5Bm9LkdAz8kz0jCbpfxD5utsGjkT3yNG0+OftDkd32i4/XVTbx9Cv9rFt8Gj6
3dGp/Z98ewE4r+0cPZYCoDma23rTz4dri19+v9gJL/y8N78sPb38u1Oue5ItSU9aO1Y2b68FQE9a
Kx58sj62pbPj2ranXX9qH9Mf54R/8Xhpsd499kzMWrAu6rfsjaat/THj6ebYne5nftNgXsxPkd9b
d/x4U/s98MJltZ/3Hpz6/kQY5N+98H06ZtpHfsYh36f8Rv0cOCc/vnm9nDj63NkFQF5Q846m07F7
KNp6+qJ950C07eiPjl0DsXPfYOzuH4rd6Uw9f82XtfXsi86+iVpMTLcfAKptV1os82vzyxu7amfJ
PWkxywvauZL3tyOdHM5fuTkW1G2NHWkhfmROY6zv3JcuPzTtNi9HPvvftnciHpvbVPucf36j4aPp
eF294+m2pOPtS9dLJ9JT8jbHv+af8z5euOzM5PuwcdtAuk8NKSLySyqnrrf5xH3i6PNnFgCXpgAY
TgGQi6k7nZVPp2c4n6WfoaF0dj7NPgAgrxFtuyZi1sL18eCs+nho9tpz7oEn6mLO8s2xNZ1R7xx5
Jpo7+uPhpxrjoSenv/7L9aMn6mNZY/cL929FS0/tKfrprnsuPPxUQzS27Zt2vd2eTJ5VAEw+EztG
nq3tDAB+k3aM5Jd385u4D01JZ8rnzPF95sVwRzqxrR0vfc0vN5zzY2XH95lfaqgdL33NTv7dOZX2
me/LC8c67bHtTiaP/eIsA2D0xy/c8B21r/k1dwA49/IaM+2zyOfMScerHes3e7x8jFOPN/31zpUT
x8v3a2rNnpJfzj/zAPjYpbUA2JUCIBfFVDEdi76xozFx8GiMHwAAzjd5je6fyGf+U2v31LMCx2J/
CoBrr73upQVArorBtNNnjx2JY0cBgPNNXqNHUwjkNfucBsBACoB8gCNHAIDzTV6jR/YLAACoFAEA
ABUkAACgggQAAFSQAACAChIAAFBBAgDO0rFjx+KZZ56pfS2zE/dxuscAuPAJADgLR48ejcnJyRge
Hq6EiYmJaR8H4MInAOAsPPvss9HU1BTLli2Lurq6WLNmTSnl+7Zy5cra9zl6sukeD+DCJQDgLOSn
xRsaGqKnpydGRkZiaGiolPLZf29vby0E8v0WAFA+AgDOQg6AxsbG6O7uri2UAwMDpTQ4OBh79uyJ
+vr62v0WAFA+AgDOwssJgMHh0RgfH4nBaX53rg2OjMbYxGgM9U//+19HAED5CQA4Cy81AAYHB6J3
R0esa90ae9PiWhQB/QODMTI2EZMTI+nnkdi/fyJGhgZfdL0iefvxg4djf193tDe2xe50G19KcAgA
KD8BAGfhpQXAYIyODsXGBbfHez9wR3SMjKRF/Vfb5jg4cb2R4b5oa14di1e1x2B/Wyx8ek1s3dWX
jpUjIIVDjofkxPVP/Fy7LBke3RdNs78Tn/6HN8bb3/SVaDk0GWMv7P/M5f0JACg3AQBn4eUEwKYF
34qLLr4ztk9Oxv6JiRgbHo6h4ZEYGxuOgf7+GBgai2MHe+Op714dF1/5dIz2z4kPvvuaWNy2O8bG
x2JkdDzG09fxsfR9OvbIaPo+/TyWfs5fR0eGY3hkb9Q//vX46Pv+Lt72lptjnQAACggAOAsvPQCG
o2P5HfGOv/9IfOCSf4w3/e0H4ofrNsT6lY/EzbfNi979+2Owc3Hc+MUvxUVv+IP4z3/yrvjkZe+I
1/7+H8TbvjAz9o10xoLvfTje+pdvird+6qvR1N8Rs++5Pa7+5CfiXW9/U7z5H66Mx1uGYjxFwKEf
H42dax+Jz/3NzdF4YFwAANMSAHAWXnIAjI1Ex4Jb402ve2/cOq8uVvzgs/G2z9wQ937v+vjgZffF
7sOHo7/1gfjAuz8dV33+o3HRp++LdWvvjvf+n0/Gww1bo3HGtXHpxe+Lx5etjjuu+VB86PYfxB0f
f0+8+T03xbKGpfHDz344Lr5qdvQdnIiJycHYsPDu+HQKgCYBABQQAHAWXtZLAAu/He//6J3Rc+iZ
ONa7ID79gS/FLbdcGR/94qPRd+RQDG58NC77yLXxjW9cF1fcvDTGBxfEZR/+RqzbviHuu+nKuOIb
a+LZXx6NtoXfi8s/dnVcc83VcdO9zfHjn0/Gyh99JT78mYdjjwAAzpAAgLPw0p8BGIrNT98W//D2
W6N58vk4tP6ueMdHvhB3fffmuPg990TnM8/Hvua745KLPh9fu/nq+MxXl8dE/9y4+KKvRcve3bHw
js/GR6+4Lfamhbj+gc/He/75pvh6DoB7GuLIM4Ox6J4b4iOffSR6TwTAgrviU2+9SQAAhQQAnIWX
8xJA58Lb4y//4xviLe9+R7z1je+ML81YHXs76+Pav3t9/M+/fl9c9sGPxHved1PMfPyL8fd/9Hfx
9Rn3xDUf/Kt450fujNat8+Pbn/nzeMOb/ybe8O7PxayWFfG9q66MG1MAHE4BsPjeHACP/ioAFt4d
n/prAQAUEwBwFl5aAEwtqPt2b4/W+rpYtmhOzFvSEnsGxmJibDC2b1kV8+fOj9VrWmPj5u2xt7c9
mpcui8a2zvS7uli+bF3sGR2O3q6mWDhvbixp2h7j4wOxraMjOrt7Y2h4IHZ1d8aW9p7oH8ofCRyI
vbu2R/uGzujNP09ze34dAQDlJwDgLLzUAMgGh0ZifHIiJif3x/7J8RgeOvGHfyZj//7JmJjIH+nL
/77AaIynn8fy3wuo/VGg0bSI58/4T6Tr7Y/J2l8TTNuNjsbI8GD09w9MfZwwRcLA8b/8Nzg0HKMv
468OCgAoPwEAZ+HlBMCFRABA+QkAOAs5APK/BliVAPCvAUJ5CQA4C88++2y0tLTEsmXLaovj6f+O
fpmsXLmy9gxAXvwFAJSPAICzdODAgRgfz3+Wt/zyew6mewyAC58AgLOUz4aPHTtWGdM9BsCFTwAA
QAUJAACoIAEAABUkAACgggQAAFSQAACAChIAAFBBAgAAKkgAAEAFCQAAqCABAAAVJAAAoIIEAABU
kAAAgAoSAABQQQIAACroFQ2Aw4cPx/PPPx/GGGPM+T7PPfdcbd2abj27EL2iAfCTn/wkFi5cGDfe
eGN8+ctfjmuuuQYAzit5fcrr1LJly2rr1nTr2YXoFQ2APO9617vida97XXzoQx+Kf/qnfwKA80pe
n/74j/84Lrrootq6Nd16diF6xQMgP6DXXnttNDc3x4oVKwDgvNLS0hKf//zn4+KLL66tW9OtZxei
VzwA3v/+99ce2KVLl8acOXMA4LySn/r/5Cc/GZdccklt3ZpuPbsQCQAA+BcIgIIRAACUmQAoGAEA
QJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAo
GAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACU
mQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIR
AACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJ
gIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEA
QJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAo
GAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACU
mQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIR
AACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJ
gIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEA
QJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAo
GAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACU
mQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIR
AACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJ
gIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEA
QJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAo
GAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACU
mQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIR
AACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJ
gIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEA
QJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAo
GAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACU
mQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIR
AACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJ
gIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEA
QJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAo
GAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACU
mQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgIIRAACUmQAoGAEAQJkJgII5FwFw9dVXx9q1a2sRAADn
k4aGhrjiiivi4osvrq1b061nF6JXPADe+c53xlvf+ta45ppras8EAMD5JK9Pb3zjG+N973tfbd2a
bj27EL2iAfCzn/0sHnjggfjQhz5UeyYAAM5HeZ165JFHauvWdOvZhegVDYDDhw/Hc889VysqY4wx
5nyevF7ldWu69exC9IoGAADwyhAAAFBBAgAAKkgAAEAFCQAAqCABAAAVJAAAoIIEAABUkAAAgAoS
AABQQQIAACpIAABABQkAAKggAQAAFSQAAKCCBAAAVJAAAIAKEgAAUEECAAAqSAAAQAUJAACoIAEA
ABUkAACgggQAAFSQAACAChIAAFBBAgAAKkgAAEAFCQAAqCABAAAVJAAAoIIEAABUkAAAgAoSAABQ
QQIAACpIAABABQkAAKggAQAAFSQAAKCCBAAAVJAAAIAKEgAAUEECAAAqSAAAQAUJAACoIAEAABUk
AACgggQAAFSQAACAChIAAFBBAgAAKkgAAEAFCQAAqCABAAAVJAAAoIIEAABUkAAAgAoSAABQQQIA
ACpIAABABQkAAKggAQAAFSQAAKCCBAAAVJAAAIAKEgAAUEECAAAqSAAAQAUJAACoIAEAABUkAACg
ggQAAFSQAACAChIAAFBBAgAAKkgAAEAFCQAAqCABAAAVJAAAoIIEAABUkAAAgAoSAABQQQIAACpI
AABABQkAAKggAQAAFSQAAKCCBAAAVJAAAIAKEgAAUEECAAAqSAAAQAUJAACoIAEAABUkAACgggQA
AFSQAACAChIAAFBBAgAAKkgAAEAFCQAAqCABAAAVJAAAoIIEAABUkAAAgAoSAABQQQIAACpIAABA
BQkAAKggAQAAFSQAAKCCBAAAVJAAAIAKEgAAUEECAAAqSAAAQAUJAACoIAEAABUkAACgggQAAFSQ
AACAChIAAFBBAgAAKkgAAEAFCQAAqCABAAAVJAAAoIIEAABUkAAAgAoSAABQQQIAACpIAABABQkA
AKggAQAAFSQAAKCCBAAAVJAAAIAKEgAAUEECAAAqSAAAQAUJAACoIAEAABUkAACgggQAAFSQAACA
ChIAAFBBAgAAKkgAAEAFCQAAqCABAAAVJAAAoIIEAABUkAAAgAoSAABQQQIAACpIAABABQkAAKgg
AQAAFSQAAKCCBAAAVJAAAIAKEgAAUEECAAAqSAAAQAUJAACoIAEAABUkAACgggQAAFSQAACAChIA
AFBBAgAAKkgAAEAFCQAAqCABAAAVJAAAoIIEAABUkAAAgAoSAABQQQIAACpIAABABQkAAKggAQAA
FSQAAKCCBAAAVJAAAIAKEgAAUEECAAAqSAAAQAUJAACoIAEAABX0GwuAwRQAzx6bOgAAcH7Ja/To
gXMcAD1pZ3vHjsZY2vFoqgsA4PyS1+h940dra/Y5C4ATO8lVAQCcn05e/E+s3S87AACAC4sAAIAK
egkB8GzsTAGQNwQALkzdyf5jvzyzAPj4xy8dOPLjX8TBH0dMpmoAAC5Uv4yfR8T1198Yx5f54nn3
u9+957rrb3z+uuuuf/7aawGAC9kNN3zl+fdddNFPjy/zxhhjjDHGGGOMMcYYY4wxxhhjjDHGGGOM
McYYY4wxxhhjjDHGGGOMMcYYY4wxxhhjjDHGGGOM+deYV73q/wPc9dqzgjdl7AAAAABJRU5ErkJg
gg==</Preview>
  <Object type="System.Windows.Forms.Form, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="form1" children="Controls">
    <Property name="ClientSize">602, 564</Property>
    <Property name="Name">form1</Property>
    <Property name="Text">Form</Property>
    <Event name="Load">form1_Load</Event>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="button1" children="Controls">
      <Property name="Location">223, 12</Property>
      <Property name="Name">button1</Property>
      <Property name="Size">75, 23</Property>
      <Property name="TabIndex">1</Property>
      <Property name="Text">button1</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">button1_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.DataGridView, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="datagridview1" children="Controls">
      <Property name="ColumnHeadersHeightSizeMode">AutoSize</Property>
      <Property name="Location">12, 58</Property>
      <Property name="Name">datagridview1</Property>
      <Property name="Size">525, 269</Property>
      <Property name="TabIndex">0</Property>
    </Object>
  </Object>
  <Code><![CDATA[
$form1_Load = {

}

#region Control Helper Functions
function Load-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The ComboBox control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the ComboBox's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{	
			$array.Add($Item)	
		}
		$DataGridView.DataSource = $array
	}
	
	$DataGridView.ResumeLayout()
}
#endregion

#region Converto-Datatable

function ConvertTo-DataTable
{
	[OutputType([System.Data.DataTable])]
	param (
		[ValidateNotNull()]
		$InputObject,
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
	
	if ($Table -eq $null)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($InputObject -eq $null) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($item -ne $null)
				{
					$object = $item
					break
				}
			}
			
			if ($object -eq $null) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__'))#filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($prop.Value -ne $null)
					{
						try { $type = $prop.Value.GetType() }
						catch { }
					}
					
					if ($type -ne $null) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @(, $Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(, $Table)
}

#endregion

Function Test-ConnectionAsync
{
	[OutputType('Net.AsyncPingResult')]
	[cmdletbinding()]
	Param (
		[parameter(ValueFromPipeline = $True)]
		[string[]]$Computername,
		[parameter()]
		[int32]$Timeout = 100,
		[parameter()]
		[Alias('Ttl')]
		[int32]$TimeToLive = 128,
		[parameter()]
		[switch]$Fragment,
		[parameter()]
		[byte[]]$Buffer
	)
	Begin
	{
		
		If (-NOT $PSBoundParameters.ContainsKey('Buffer'))
		{
			$Buffer = 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
						   0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69
		}
		$PingOptions = New-Object System.Net.NetworkInformation.PingOptions
		$PingOptions.Ttl = $TimeToLive
		If (-NOT $PSBoundParameters.ContainsKey('Fragment'))
		{
			$Fragment = $False
		}
		$PingOptions.DontFragment = $Fragment
		$Computerlist = New-Object System.Collections.ArrayList
		If ($PSBoundParameters.ContainsKey('Computername'))
		{
			[void]$Computerlist.AddRange($Computername)
		}
		Else
		{
			$IsPipeline = $True
		}
	}
	Process
	{
		If ($IsPipeline)
		{
			[void]$Computerlist.Add($Computername)
		}
	}
	End
	{
		$Task = ForEach ($Computer in $Computername)
		{
			[pscustomobject] @{
				Computername = $Computer
				Task = (New-Object System.Net.NetworkInformation.Ping).SendPingAsync($Computer, $Timeout, $Buffer, $PingOptions)
			}
		}
		Try
		{
			[void][Threading.Tasks.Task]::WaitAll($Task.Task)
		}
		Catch { }
		$Task | ForEach {
			If ($_.Task.IsFaulted)
			{
				$Result = $_.Task.Exception.InnerException.InnerException.Message
				$IPAddress = $Null
			}
			Else
			{
				$Result = $_.Task.Result.Status
				$IPAddress = $_.task.Result.Address.ToString()
			}
			$Object = [pscustomobject]@{
				Computername = $_.Computername
				IPAddress = $IPAddress
				Result = $Result
			}
			$Object.pstypenames.insert(0, 'Net.AsyncPingResult')
			$Object
		}
	}
	
}

$button1_Click={
	
	Test-ConnectionAsync -Computername "Robot-x"
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies>
    <Assembly>System.Management.Automation, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</Assembly>
    <Assembly>mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
  </Assemblies>
</File>